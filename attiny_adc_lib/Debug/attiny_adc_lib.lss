
attiny_adc_lib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000ca  008000ca  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007fb  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000600  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000449  00000000  00000000  000011cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000134  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e0       	ldi	r30, 0x08	; 8
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 3c       	cpi	r26, 0xCA	; 202
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa ec       	ldi	r26, 0xCA	; 202
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 3d       	cpi	r26, 0xD0	; 208
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	96 d0       	rcall	.+300    	; 0x17e <main>
  52:	d8 c0       	rjmp	.+432    	; 0x204 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <push>:
		default:
			adc_value = 0;
			break;
	}
	return adc_value;
}
  56:	fb 01       	movw	r30, r22
  58:	ec 59       	subi	r30, 0x9C	; 156
  5a:	ff 4f       	sbci	r31, 0xFF	; 255
  5c:	90 81       	ld	r25, Z
  5e:	9a 30       	cpi	r25, 0x0A	; 10
  60:	24 f0       	brlt	.+8      	; 0x6a <push+0x14>
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	31 96       	adiw	r30, 0x01	; 1
  66:	80 83       	st	Z, r24
  68:	0e c0       	rjmp	.+28     	; 0x86 <push+0x30>
  6a:	fb 01       	movw	r30, r22
  6c:	e9 0f       	add	r30, r25
  6e:	f1 1d       	adc	r31, r1
  70:	97 fd       	sbrc	r25, 7
  72:	fa 95       	dec	r31
  74:	80 83       	st	Z, r24
  76:	fb 01       	movw	r30, r22
  78:	eb 59       	subi	r30, 0x9B	; 155
  7a:	ff 4f       	sbci	r31, 0xFF	; 255
  7c:	10 82       	st	Z, r1
  7e:	31 97       	sbiw	r30, 0x01	; 1
  80:	80 81       	ld	r24, Z
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	80 83       	st	Z, r24
  86:	fb 01       	movw	r30, r22
  88:	eb 59       	subi	r30, 0x9B	; 155
  8a:	ff 4f       	sbci	r31, 0xFF	; 255
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 81       	ld	r25, Z
  90:	91 11       	cpse	r25, r1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	08 95       	ret

00000096 <pull>:
  96:	fc 01       	movw	r30, r24
  98:	ec 59       	subi	r30, 0x9C	; 156
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	20 81       	ld	r18, Z
  9e:	12 16       	cp	r1, r18
  a0:	2c f0       	brlt	.+10     	; 0xac <pull+0x16>
  a2:	32 96       	adiw	r30, 0x02	; 2
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	20 83       	st	Z, r18
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	08 95       	ret
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	fc 01       	movw	r30, r24
  b0:	ec 59       	subi	r30, 0x9C	; 156
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	20 83       	st	Z, r18
  b6:	32 96       	adiw	r30, 0x02	; 2
  b8:	10 82       	st	Z, r1
  ba:	fc 01       	movw	r30, r24
  bc:	e2 0f       	add	r30, r18
  be:	f1 1d       	adc	r31, r1
  c0:	27 fd       	sbrc	r18, 7
  c2:	fa 95       	dec	r31
  c4:	80 81       	ld	r24, Z
  c6:	08 95       	ret

000000c8 <spi_begin>:
  c8:	b9 9a       	sbi	0x17, 1	; 23
  ca:	8d b1       	in	r24, 0x0d	; 13
  cc:	88 61       	ori	r24, 0x18	; 24
  ce:	8d b9       	out	0x0d, r24	; 13
  d0:	08 95       	ret

000000d2 <adc_avaliable>:
int8_t adc_avaliable()
{
	int8_t adc_flage;
	adc_flage = ADCSRA & (1<<ADIF);		// get the value of the intrupt falge
  d2:	96 b1       	in	r25, 0x06	; 6
	if(adc_flage)						// if flage set 
  d4:	89 2f       	mov	r24, r25
  d6:	80 71       	andi	r24, 0x10	; 16
  d8:	94 fd       	sbrc	r25, 4
		ADCSRA|= (1<<ADIF);				// clear falge
  da:	34 9a       	sbi	0x06, 4	; 6
	return adc_flage;
}
  dc:	08 95       	ret

000000de <adc_config>:
void adc_config(struct adc_config adc)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <adc_config+0x6>
  e4:	00 d0       	rcall	.+0      	; 0xe6 <adc_config+0x8>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <adc_config+0xa>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	49 83       	std	Y+1, r20	; 0x01
  ee:	5a 83       	std	Y+2, r21	; 0x02
  f0:	6b 83       	std	Y+3, r22	; 0x03
  f2:	7c 83       	std	Y+4, r23	; 0x04
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	9e 83       	std	Y+6, r25	; 0x06
	switch(adc.channel)
  f8:	52 30       	cpi	r21, 0x02	; 2
  fa:	69 f0       	breq	.+26     	; 0x116 <adc_config+0x38>
  fc:	1c f4       	brge	.+6      	; 0x104 <adc_config+0x26>
  fe:	51 30       	cpi	r21, 0x01	; 1
 100:	31 f0       	breq	.+12     	; 0x10e <adc_config+0x30>
 102:	1a c0       	rjmp	.+52     	; 0x138 <adc_config+0x5a>
 104:	53 30       	cpi	r21, 0x03	; 3
 106:	61 f0       	breq	.+24     	; 0x120 <adc_config+0x42>
 108:	54 30       	cpi	r21, 0x04	; 4
 10a:	79 f0       	breq	.+30     	; 0x12a <adc_config+0x4c>
 10c:	15 c0       	rjmp	.+42     	; 0x138 <adc_config+0x5a>
	{
		case ADC0:
			ADMUX &= 0xF0;		// clear the LSB Hex, set to channel 0
 10e:	87 b1       	in	r24, 0x07	; 7
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	87 b9       	out	0x07, r24	; 7
			break;
 114:	14 c0       	rjmp	.+40     	; 0x13e <adc_config+0x60>
		case ADC1:
			ADMUX &= 0xF0;
 116:	87 b1       	in	r24, 0x07	; 7
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	87 b9       	out	0x07, r24	; 7
			ADMUX |= (1<<MUX0);
 11c:	38 9a       	sbi	0x07, 0	; 7
			break;
 11e:	0f c0       	rjmp	.+30     	; 0x13e <adc_config+0x60>
		case ADC2:
			ADMUX &=0xF0;
 120:	87 b1       	in	r24, 0x07	; 7
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	87 b9       	out	0x07, r24	; 7
			ADMUX |= (1<<MUX1);
 126:	39 9a       	sbi	0x07, 1	; 7
			break;
 128:	0a c0       	rjmp	.+20     	; 0x13e <adc_config+0x60>
		case ADC3:
			ADMUX &=0xF0;
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	80 7f       	andi	r24, 0xF0	; 240
 12e:	87 b9       	out	0x07, r24	; 7
			ADMUX |= (1<<MUX0)|(1<<MUX1);
 130:	87 b1       	in	r24, 0x07	; 7
 132:	83 60       	ori	r24, 0x03	; 3
 134:	87 b9       	out	0x07, r24	; 7
			break;
 136:	03 c0       	rjmp	.+6      	; 0x13e <adc_config+0x60>
		default:
			ADMUX &= 0xF0;
 138:	87 b1       	in	r24, 0x07	; 7
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	87 b9       	out	0x07, r24	; 7
			break;
	}
	switch(adc.Vref)
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	83 30       	cpi	r24, 0x03	; 3
 142:	09 f4       	brne	.+2      	; 0x146 <adc_config+0x68>
	{
		case Internal_1V1:
			ADMUX |= (1<<REFS1);		// set reference to 1.1V internal
 144:	3f 9a       	sbi	0x07, 7	; 7
		case VCC:
			break;
		default:
			break;
	}
	switch(adc.pre_scale)
 146:	8e 81       	ldd	r24, Y+6	; 0x06
 148:	87 30       	cpi	r24, 0x07	; 7
 14a:	19 f4       	brne	.+6      	; 0x152 <adc_config+0x74>
		case DIV2:
			break;
		case DIV4:
			break;
		case DIV256:
			ADCSRA|= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 14c:	86 b1       	in	r24, 0x06	; 6
 14e:	87 60       	ori	r24, 0x07	; 7
 150:	86 b9       	out	0x06, r24	; 6
			break;
		default:
			break;
	}
	switch(adc.resolution)
 152:	8d 81       	ldd	r24, Y+5	; 0x05
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	19 f0       	breq	.+6      	; 0x15e <adc_config+0x80>
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	19 f0       	breq	.+6      	; 0x162 <adc_config+0x84>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <adc_config+0x86>
	{
		case _8BIT:
			ADMUX |= (1<<ADLAR);	// Left adjust the 10-bit adc result
 15e:	3d 9a       	sbi	0x07, 5	; 7
			break;
 160:	01 c0       	rjmp	.+2      	; 0x164 <adc_config+0x86>
		case _10BIT:
			ADMUX &= ~(1<<ADLAR);	// Right adjust the 10-bit adc result
 162:	3d 98       	cbi	0x07, 5	; 7
			break;
		default:
			break;
	}
}
 164:	26 96       	adiw	r28, 0x06	; 6
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <adc_start>:

void adc_start()
{
	ADCSRA|= (1<<ADSC);							// start convention
 176:	36 9a       	sbi	0x06, 6	; 6
 178:	08 95       	ret

0000017a <adc_enable>:
}

void adc_enable()
{
	ADCSRA|= (1<<ADEN);							// enable adc
 17a:	37 9a       	sbi	0x06, 7	; 6
 17c:	08 95       	ret

0000017e <main>:
		return *(temp->buffer+temp->pointer);			// load data
	}
}
int main(void)
{
	spi_begin();	// Set device as spi slave
 17e:	a4 df       	rcall	.-184    	; 0xc8 <spi_begin>
	USIDR = 0X32;	// load address
 180:	82 e3       	ldi	r24, 0x32	; 50
 182:	8f b9       	out	0x0f, r24	; 15
	adc.Vref = Internal_1V1;
 184:	ea ec       	ldi	r30, 0xCA	; 202
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	93 e0       	ldi	r25, 0x03	; 3
 18a:	49 2f       	mov	r20, r25
 18c:	90 83       	st	Z, r25
	adc.mode= SINGLE;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	68 2f       	mov	r22, r24
 192:	82 83       	std	Z+2, r24	; 0x02
	adc.channel = ADC2;
 194:	59 2f       	mov	r21, r25
 196:	91 83       	std	Z+1, r25	; 0x01
	adc.resolution = _8BIT;
 198:	84 83       	std	Z+4, r24	; 0x04
	adc.pre_scale = DIV256;
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	95 83       	std	Z+5, r25	; 0x05
	adc_config(adc);
 19e:	70 91 cd 00 	lds	r23, 0x00CD	; 0x8000cd <__data_end+0x3>
 1a2:	9d df       	rcall	.-198    	; 0xde <adc_config>
	adc_enable();
 1a4:	ea df       	rcall	.-44     	; 0x17a <adc_enable>
	adc_start();
 1a6:	e7 df       	rcall	.-50     	; 0x176 <adc_start>
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
	pointer++;
	// Note the receiver will receive MSB first
	*/
	for(int i=0;i<20;i++)
	{
		push(i,&temp);
 1aa:	60 e6       	ldi	r22, 0x60	; 96
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	8c 2f       	mov	r24, r28
 1b0:	52 df       	rcall	.-348    	; 0x56 <push>
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
	*(buffer+pointer)=*(x+3);//0x11;
	if((pointer<100))
	pointer++;
	// Note the receiver will receive MSB first
	*/
	for(int i=0;i<20;i++)
 1b4:	c4 31       	cpi	r28, 0x14	; 20
 1b6:	c9 f7       	brne	.-14     	; 0x1aa <main+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	80 e7       	ldi	r24, 0x70	; 112
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x40>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x4a>
 1c8:	00 00       	nop
			USIDR = pull(&temp);
			//*(buffer+pointer)=0x00;	// empty buffer
		}
		else if(!(PINB&(1<<PINB3)))
		{
			SS_flage=1;
 1ca:	c1 e0       	ldi	r28, 0x01	; 1
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
		push(i,&temp);
	}
	_delay_ms(100);
	while (1)
    {
		if(adc_avaliable())
 1ce:	81 df       	rcall	.-254    	; 0xd2 <adc_avaliable>
 1d0:	81 11       	cpse	r24, r1
		{
			// both the ADCL and ADCH registeres must be read, other wise they will not be updated
			// read ADCL first if more then 8-bit resulution is required.
			adc_start();		// start next convention
 1d2:	d1 df       	rcall	.-94     	; 0x176 <adc_start>
		}
		if((PINB&(1<<PINB3))&&SS_flage)
 1d4:	b3 9b       	sbis	0x16, 3	; 22
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <main+0x78>
 1d8:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <SS_flage>
 1dc:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <SS_flage+0x1>
 1e0:	89 2b       	or	r24, r25
 1e2:	49 f0       	breq	.+18     	; 0x1f6 <main+0x78>
		{
			SS_flage=0;
 1e4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <SS_flage+0x1>
 1e8:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <SS_flage>
			USIDR = pull(&temp);
 1ec:	80 e6       	ldi	r24, 0x60	; 96
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	52 df       	rcall	.-348    	; 0x96 <pull>
 1f2:	8f b9       	out	0x0f, r24	; 15
 1f4:	ec cf       	rjmp	.-40     	; 0x1ce <main+0x50>
			//*(buffer+pointer)=0x00;	// empty buffer
		}
		else if(!(PINB&(1<<PINB3)))
 1f6:	b3 99       	sbic	0x16, 3	; 22
 1f8:	ea cf       	rjmp	.-44     	; 0x1ce <main+0x50>
		{
			SS_flage=1;
 1fa:	d0 93 c8 00 	sts	0x00C8, r29	; 0x8000c8 <SS_flage+0x1>
 1fe:	c0 93 c7 00 	sts	0x00C7, r28	; 0x8000c7 <SS_flage>
 202:	e5 cf       	rjmp	.-54     	; 0x1ce <main+0x50>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
